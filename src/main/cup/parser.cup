package parse;

terminal String LITBOOL;
terminal String LITINT;
terminal String LITSTRING;
terminal String ID;
terminal Double LFLOAT;
terminal        ASSIGN;
terminal        PLUS, MINUS, TIMES, DIV, UMINUS;
terminal        EQ, NE, LT, LE, GT, GE, NG;
terminal        AND, OR;
terminal        LPAREN, RPAREN, COMMA;
terminal        BOOL, INT, STRING;
terminal        IF, THEN, ELSE;
terminal        WHILE, DO;
terminal        PRINT;

non terminal Exp exp;

precedence left OR;
precedence left AND;
precedence nonassoc EQ, NE, GT, GE, LT, LE;
precedence left PLUS, MINUS;
precedence left TIMES, DIV;
precedence nonassoc UMINUS;

start with exp;

exp ::=
  LITBOOL:x                                 {: RESULT = new ExpBool(loc(xxleft,xxright), x); :}
| LITINT:x                                  {: RESULT = new ExpInt(loc(xxleft,xxright), x); :}
| LITSTRING:x                               {: RESULT = new ExpString(loc(xxleft,xxright), x); :}
| exp:x AND exp:y                           {: RESULT = new ExpBin(loc(xxleft,yxright), ExpBin.Operator.AND, x, y); :}
| exp:x OR exp:y                            {: RESULT = new ExpBin(loc(xxleft,yxright), ExpBin.Operator.OR, x, y); :}
| exp:x EQ exp:y                            {: RESULT = new ExpBin(loc(xxleft,yxright), ExpBin.Operator.EQ, x, y); :}
| exp:x NE exp:y                            {: RESULT = new ExpBin(loc(xxleft,yxright), ExpBin.Operator.NE, x, y); :}
| exp:x GT exp:y                            {: RESULT = new ExpBin(loc(xxleft,yxright), ExpBin.Operator.GT, x, y); :}
| exp:x GE exp:y                            {: RESULT = new ExpBin(loc(xxleft,yxright), ExpBin.Operator.GE, x, y); :}
| exp:x LT exp:y                            {: RESULT = new ExpBin(loc(xxleft,yxright), ExpBin.Operator.LT, x, y); :}
| exp:x LE exp:y                            {: RESULT = new ExpBin(loc(xxleft,yxright), ExpBin.Operator.LE, x, y); :}
| exp:x PLUS exp:y                          {: RESULT = new ExpBin(loc(xxleft,yxright), ExpBin.Operator.PLUS, x, y); :}
| exp:x MINUS exp:y                         {: RESULT = new ExpBin(loc(xxleft,yxright), ExpBin.Operator.MINUS, x, y); :}
| exp:x TIMES exp:y                         {: RESULT = new ExpBin(loc(xxleft,yxright), ExpBin.Operator.TIMES, x, y); :}
| exp:x DIV exp:y                           {: RESULT = new ExpBin(loc(xxleft,yxright), ExpBin.Operator.DIV, x, y); :}
| MINUS:m exp:x                             {: RESULT = new ExpMinus(loc(mxleft,xxright), x); :} %prec UMINUS
| LPAREN:l exp:s RPAREN:r                  {: RESULT = new ExpSeq(loc(lxleft,rxright), s); :}
| ID:v                                      {: RESULT = new ExpVar(loc(vxleft,vxright), v); :}
| ID:v ASSIGN exp:e                         {: RESULT = new ExpAssign(loc(vxleft,exright), v, e); :}
| ID:f LPAREN exp:a RPAREN:r               {: RESULT = new ExpCall(loc(fxleft,rxright), f, a); :}
| IF:i exp:t THEN exp:x ELSE exp:y          {: RESULT = new ExpCond(loc(ixleft,yxright), t, x, y); :}
| WHILE:w exp:t DO exp:b                    {: RESULT = new ExpWhile(loc(wxleft,bxright), t, b); :}
;
